extends ./layout
block link
  style.
    canvas {
      display: block;
      width: 400px;
    }
    video {
      height: 400px;
      min-height: 400px;
    }
    hr {
      margin-top: 32px;
    }
    input[type="file"] {
      display: block;
      margin-bottom: 16px;
    }
    .row {
      margin: 20px;
    }
    .col-md-4 {
      margin: 20px;
      text-align: center;
    }
block content
  section.content
    .row
      .col-md-4
        video#qr-video(muted='', autoplay='', playsinline='')
      .col-md-4
        canvas#debug-canvas
      .col-md-4    
    .row(style='text-align: center;')
      h2(style='display:inline-block;') #{__('Scan from File:')}
      button.btn.btn-sm.btn-success(onclick="$('#file-selector').click();", style='display:inline-block; margin-top:-10px; margin-left: 10px;') #{__('Choose File')}
      input#file-selector.hide(type='file')
    .row(style='text-align: center;')
      b Detected QR code: 
      span#cam-qr-result None
    .panel.panel-default
      .panel-heading
        | #{__("QR LIST")}
      .panel-body
        .row
          button.btn.btn-sm.btn-success.pull-right.output  #{__("Send Output")}
          button.btn.btn-sm.btn-success.pull-right.clear(style='margin-right: 15px;')  #{__("Clear List")}
        .row
          div(style="overflow:auto")
            table.table.table-striped.table-hover.js-exportable.dataTable.qr-table
              thead
                tr                
                  th #{__("OutType")}
                  th #{__("WorkOrderIdx")}
                  th #{__("RefNo")}
                  th #{__("InIdx")}
                  th #{__("Qty")}
              tbody
block script
  script(type='module').
    import QrScanner from "/qr-scanner.min.js";  
    const video = document.getElementById('qr-video');
    const debugCheckbox = document.getElementById('debug-checkbox');
    const debugCanvas = document.getElementById('debug-canvas');
    const debugCanvasContext = debugCanvas.getContext('2d');
    const camQrResult = document.getElementById('cam-qr-result');
    const fileSelector = document.getElementById('file-selector');
    const fileQrResult = document.getElementById('cam-qr-result');
    function setResult(label, result) {
      label.textContent = result;
      label.style.color = 'teal';
      clearTimeout(label.highlightTimeout);
      label.highlightTimeout = setTimeout(() => label.style.color = 'inherit', 100);
      addTable(result);
    }
    // ####### Web Cam Scanning #######
    const scanner = new QrScanner(video, result => setResult(camQrResult, result));
    scanner.start();
    // ####### File Scanning #######
    fileSelector.addEventListener('change', event => {
      const file = fileSelector.files[0];
      if (!file) {
        return;
      }
      QrScanner.scanImage(file)
        .then(result => setResult(fileQrResult, result))
        .catch(e => setResult(fileQrResult, e || 'No QR code found.'));
    });
    // ####### debug mode related code #######
    // debugCheckbox.addEventListener('change', () => setDebugMode(debugCheckbox.checked));
    setDebugMode(true);
    function setDebugMode(isDebug) {
      const worker = scanner._qrWorker;
      worker.postMessage({
        type: 'setDebug',
        data: isDebug
      });
      if (isDebug) {
        debugCanvas.style.display = 'block';
        worker.addEventListener('message', handleDebugImage);
      } else {
        debugCanvas.style.display = 'block';
        worker.removeEventListener('message', handleDebugImage);
      }
    }
    let b = true;
    function handleDebugImage(event) {
      const type = event.data.type;
      if (type === 'debugImage') {
        const imageData = event.data.data;
        if (debugCanvas.width !== imageData.width || debugCanvas.height !== imageData.height) {
          debugCanvas.width = imageData.width;
          debugCanvas.height = imageData.height;
        }
        debugCanvasContext.putImageData(imageData, 0, 0);
        if(b) {
          console.log(imageData);
          b = false;
        }
      }
    }    
  script.
    var init = function() {
      $('.qr-table').DataTable({
        "pageLength": 25,
        responsive: true,
        dom: '<"html5buttons"B>lTfgtip',
        buttons: ['copy', 'csv', 'excel', 'pdf', 'print']
      });
    }
    init();
    var tabledata = [];
    var addTable = function(data) {
      if(!tabledata.includes(data)) {
        tabledata.push(data);
        var tmp = [
          data.split('|')[0], data.split('|')[1], data.split('|')[2], data.split('|')[3], data.split('|')[4]
        ];
        $('.qr-table').dataTable().fnAddData(tmp);
        $('.qr-table').dataTable().fnDraw();
      }
    }
    $('.clear').on('click', function() {
      tabledata = [];
      $('.qr-table').dataTable().fnClearTable();
    })